<template>
  <div class="searchResult">
    <el-row type="flex" class="goods-list">
      <el-col
        :span="6"
        v-for="(item, index) in goodsList"
        :key="index"
        class="goods"
      >
        <div class="goods-box" @click="toGoodsDetail">
          <div class="img">
            <img :src="item.image" alt="" />
          </div>
          <div class="info">
            <h1 class="price">￥{{ item.price }}</h1>
            <div class="name">{{ item.name }}</div>
            <div class="add-cart-btn">
              <i class="el-icon-shopping-cart-2"></i>
              加入购物车
            </div>
          </div>
        </div>
      </el-col>
    </el-row>
  </div>
</template>

<script>
import { getSearchMessage } from '@/api/getSearchMessage'
import { mapGetters } from 'vuex'
export default {
  name: 'searchResult',
  data: function() {
    return {
      goodsList: ''
    }
  },
  computed: {
    ...mapGetters(['searchStr'])
  },
  watch: {
    goodsList: {
      handler() {
        getSearchMessage().then(res => {
          let dataList = ''
          dataList = res.data.data.map(goods => {
            //使用map遍历数组
            if (
              goods.name
                .toLowerCase()
                .indexOf(`${this.searchStr.toLowerCase()}`) !== -1
              // 不区分大小写，indexOf()没有找的返回-1
            ) {
              return {
                //当匹配到的时候原样返回
                id: goods.id,
                name: goods.name,
                price: goods.price,
                details: goods.details,
                image: goods.image
              }
            } else {
              //将不匹配的数据设置为空
              return {
                name: ''
              }
            }
          })
          this.goodsList = dataList.filter(goods => {
            //对新数组进行过滤，将空的数据清除
            return goods.name !== ''
          })
        })
      },
      immediate: true //为true时第一次也执行
    }
  },
  methods: {
    /**
     * 当要跳转到新的窗口时，router-link是不支持直接设置target='_blank'的，除非tag设置成a标签
     * 可以使用this.$router.resolve方法
     * ｛href｝是es6的对象结构，即等于 const href = this.$router.resolve({xxxxxx}).href
     */
    toGoodsDetail() {
      const { href } = this.$router.resolve({
        path: '/detailGoods'
      })
      window.open(href, '_blank')
    }
  }
}
</script>

<style scoped lang="stylus">
.searchResult
  .goods-list
    flex-wrap wrap
    .goods
      display flex
      justify-content center
      align-items center
      margin-bottom 40px
      .goods-box
        display flex
        flex-direction column
        align-items center
        background #fff
        transition all 0.2s ease
        cursor pointer
        &:hover
          box-shadow 0px 0px 3px #ccc
        .img
          width 90%
          margin 5% 0
          img
            width 100%
            height 100%
        .info
          width 90%
          margin-bottom 5%
          .price
            color #ff0000
            margin-bottom 10px
          .add-cart-btn
            display block
            float right
            border 1px solid #eeeeee
            padding 5px
            color #ff0000
            cursor pointer
</style>
